// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GetDriveServer.Migrations
{
    [DbContext(typeof(GetDriveDbContext))]
    partial class GetDriveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewText")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            PostedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewText = "Pretty Good!",
                            Score = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            PostedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewText = "Almost excellent trip!",
                            Score = 4,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("DAL.Models.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Canceled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("DestinationLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("DestinationLongitude")
                        .HasColumnType("REAL");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DriverNote")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxPassengerCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<double>("StartLatitude")
                        .HasColumnType("REAL");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("StartLongitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Ride");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 2,
                            Canceled = false,
                            Departure = new DateTime(2024, 6, 23, 20, 22, 37, 915, DateTimeKind.Local).AddTicks(6456),
                            Destination = "Bratislava",
                            DestinationLatitude = 48.159260250000003,
                            DestinationLongitude = 17.139658691421687,
                            DriverId = 1,
                            DriverNote = "Nebereme nikoho po cestě",
                            MaxPassengerCount = 4,
                            Price = 2.1m,
                            StartLatitude = 49.192244299999999,
                            StartLocation = "Brno",
                            StartLongitude = 16.611338199999999
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 1,
                            Canceled = false,
                            Departure = new DateTime(2024, 6, 13, 20, 22, 37, 915, DateTimeKind.Local).AddTicks(6530),
                            Destination = "Košice",
                            DestinationLatitude = 48.717227200000004,
                            DestinationLongitude = 21.249677399999999,
                            DriverId = 2,
                            DriverNote = "Beriem psa.",
                            MaxPassengerCount = 3,
                            Price = 4.6m,
                            StartLatitude = 48.159260250000003,
                            StartLocation = "Bratislava",
                            StartLongitude = 17.139658691421687
                        });
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user@example.com",
                            Name = "testuser1",
                            Password = "qr4l8Q5yoqCSkXOysKrTeYRQya8lPB1TJVLZEyLvVq6ApHN9nDyPkbeyvLJjfiF/KjcIdHoT+9mAkt5ZUFG1Iw==",
                            Phone = "+421123456789",
                            Salt = "AgubqMiRegELBk4cc4AgTg=="
                        },
                        new
                        {
                            Id = 2,
                            Email = "user1@example.com",
                            Name = "testuser2",
                            Password = "qr4l8Q5yoqCSkXOysKrTeYRQya8lPB1TJVLZEyLvVq6ApHN9nDyPkbeyvLJjfiF/KjcIdHoT+9mAkt5ZUFG1Iw==",
                            Phone = "+421123456789",
                            Salt = "AgubqMiRegELBk4cc4AgTg=="
                        },
                        new
                        {
                            Id = 3,
                            Email = "user2@example.com",
                            Name = "testuser3",
                            Password = "qr4l8Q5yoqCSkXOysKrTeYRQya8lPB1TJVLZEyLvVq6ApHN9nDyPkbeyvLJjfiF/KjcIdHoT+9mAkt5ZUFG1Iw==",
                            Phone = "+421123456789",
                            Salt = "AgubqMiRegELBk4cc4AgTg=="
                        });
                });

            modelBuilder.Entity("DAL.Models.UserRide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accepted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassengerNote")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RideId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("RideId");

                    b.ToTable("UserRide");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accepted = false,
                            PassengerCount = 2,
                            PassengerId = 2,
                            PassengerNote = "Test",
                            RideId = 1
                        },
                        new
                        {
                            Id = 2,
                            Accepted = false,
                            PassengerCount = 1,
                            PassengerId = 1,
                            PassengerNote = "Potrebujem prísť včas",
                            RideId = 2
                        },
                        new
                        {
                            Id = 3,
                            Accepted = true,
                            PassengerCount = 1,
                            PassengerId = 3,
                            PassengerNote = "Testing accepted ride",
                            RideId = 1
                        },
                        new
                        {
                            Id = 4,
                            Accepted = false,
                            PassengerCount = 1,
                            PassengerId = 3,
                            PassengerNote = "Testing not accepted ride",
                            RideId = 2
                        });
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.HasOne("DAL.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Ride", b =>
                {
                    b.HasOne("DAL.Models.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("DAL.Models.UserRide", b =>
                {
                    b.HasOne("DAL.Models.User", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Ride");
                });
#pragma warning restore 612, 618
        }
    }
}
